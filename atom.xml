<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://paul-gao.com</id>
    <title>PaulGao</title>
    <updated>2021-06-28T06:13:57.583Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://paul-gao.com"/>
    <link rel="self" href="https://paul-gao.com/atom.xml"/>
    <logo>https://paul-gao.com/images/avatar.png</logo>
    <icon>https://paul-gao.com/favicon.ico</icon>
    <rights>All rights reserved 2021, PaulGao</rights>
    <entry>
        <title type="html"><![CDATA[搜索功能交互小结]]></title>
        <id>https://paul-gao.com/post/sou-suo-gong-neng-jiao-hu-xiao-jie/</id>
        <link href="https://paul-gao.com/post/sou-suo-gong-neng-jiao-hu-xiao-jie/">
        </link>
        <updated>2021-06-28T06:00:15.000Z</updated>
        <summary type="html"><![CDATA[<p>总结一下对搜索功能的认识，搜索可归纳为<strong>输入、匹配和展示</strong>三大部分，从我的角度侧重讲输入与展示。搜索功能设计的关键指标是用户搜索成功率，搜索成功率可以从用户搜索完成后快速找到相关内容并点击来设定。搜索成功率的转化漏斗就是从输入、匹配到展示的转化，所以为了提高关键指标，我们需要让过程指标（如输入时间、输入次数、搜索准确率和召回率）完成的更好，以提高最终转化率。</p>
]]></summary>
        <content type="html"><![CDATA[<p>总结一下对搜索功能的认识，搜索可归纳为<strong>输入、匹配和展示</strong>三大部分，从我的角度侧重讲输入与展示。搜索功能设计的关键指标是用户搜索成功率，搜索成功率可以从用户搜索完成后快速找到相关内容并点击来设定。搜索成功率的转化漏斗就是从输入、匹配到展示的转化，所以为了提高关键指标，我们需要让过程指标（如输入时间、输入次数、搜索准确率和召回率）完成的更好，以提高最终转化率。</p>
<!-- more -->
<h2 id="1输入">1.输入</h2>
<h3 id="11-输入入口">1.1 输入入口</h3>
<p>常见的搜索入口有：</p>
<p>①固定的输入框：搜索入口常驻在导航栏，电商类应用或信息层级复杂的应用多采用此方式，因为搜索是一个高频的使用功能，以及为了用户易于发现也会在其他一级页面展现搜索入口。</p>
<p>②固定的搜索 tab： 从tab进入搜索页。与第一类方式的需求背景相同。只是表现形式的差异，这种方式可以让信息架构更简洁，统一的入口方便用户“一键直达”。</p>
<p>③搜索 icon ：从搜素icon打开搜索页或展开输入框。与①类似的设计方式，以搜索icon代替搜索输入框。</p>
<p>④隐藏搜索框：需要用户通过特定的方式来触发显示搜索入口，这样的设计能实现页面的降噪，设计理念是当用户需要时才出现，但同时这样的方式也是学习成本最高的。微信的小程序搜索采用此方式，但是全局搜索仍采用上述方式。<br>
<img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9xudpupqdj310o0ju1kx.jpg" alt="" loading="lazy"><br>
实际应用中根据搜索在产品中的使用场景，来采用不同的交互方式。一个APP中可以灵活采用以上方式的组合。</p>
<p>点击入口后到文字输入也有不同的交互方式，一种是在当前页面直接输入，还有一种是在跳转另一页面，自动获取输入焦点。前者多用于搜索内容简单的场景，通常提供搜索关键词自动补齐，是一种轻量、简洁的方式。后者在许多 APP 上比较常见，主要是因为搜索内容复杂，需要有新的页面来承接结果和结果筛选等，而且通常搜索页面会用于展示搜索历史和热门搜索词。</p>
<h3 id="12-关键词输入">1.2 关键词输入</h3>
<p>①搜索框暗提示：告诉用户可以通过输入哪些内容来提高搜索准确率</p>
<p>②载入搜索页自动获取输入焦点，并显示对应类型键盘是一种较好的交互方式。</p>
<p>③自动补齐：用户输入关键词后，会在下拉列表中显示候选词汇，方便用户输入。更进一步地，提供筛选条件，可以帮助用户更精确搜索。</p>
<p>④删除：提供快捷的一键删除输入内容的功能。</p>
<p>⑤搜索热词、运营活动：搜索框是一个大流量的入口，根据运营需求，显示推荐的搜索词，是一种很好的增长手段。今日头条的搜索框会轮播热点新闻事件或广告，让搜索框成为类似banner一样的广告位。</p>
<p>⑥语音输入：输入框增加语音输入按钮，通过语音转换文字代替手动输入。但语音输入的场景不多，甚至识别准确率不高带来的修改成本高于手动输入。<br>
<img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9xudq6i3hj30u00w8h0i.jpg" alt="" loading="lazy"></p>
<h3 id="13搜索与取消">1.3搜索与取消</h3>
<p>上一步键入关键词后，执行搜索操作。</p>
<p>①搜索：有自动搜索、手动搜索两种。</p>
<p>自动搜索适用于结果简单的搜索，在键入关键词输入后即自动显示搜索结果，如通讯录中的搜索等，自动搜索对服务器要求较高。复杂的搜索场景中多用手动操作，辅以自动补齐来提高输入效率。</p>
<p>手动搜索的交互方式有多种交互方式，比如通过点击“搜索”按钮或软键盘的自定义 enter 键来执行。后者是 iOS 系统通用的交互方式，但 Android 某些系统版本原因，会提供键盘外的“搜索”按钮。</p>
<p>还有就是当提供输入时自动补齐功能时，通过点击建议候选词，然后对建议候选词进行搜索。</p>
<p>②取消：iOS 上通常点击搜索框帮的“取消”按钮，取消搜索并返回上一级页面。由于上述原因，Android 设计可能会采用“返回”按钮来执行取消和返回。</p>
<h3 id="14历史记录">1.4历史记录</h3>
<p>①首先考虑是否需要提供历史记录功能，对于那些搜索过程明确的，隐私的可以考虑不提供，对于搜索使用频繁的，搜索内容模糊的，可以考虑增加这一特性。</p>
<p>②展示搜索记录的数量，通常有一个固定的上限；但在搜索引擎类应用中，如果用户需要，会保留所有的搜索记录。</p>
<p>③删除：可以看到不同 APP 对删除设计有不同的考虑，出于防止误操作或提高用户的搜索使用率，有些应用的删除没提供直接的入口，而且需要二次确认。</p>
<h2 id="2匹配">2.匹配</h2>
<p>获取用户输入的关键词后，对关键词进行分词，拆分有效分析的词语，然后将关键词与内容索引库进行关联，得到匹配结果，再根据筛选策略来判断需要向优先用户展示哪些信息。</p>
<p>如医疗 APP 中，用户期望通过搜索疾病来找到医生进行在线问诊。在用户输入疾病名称后，将关键词拆分为有效的词组。如何匹配医生呢，需要将医生与疾病名称之间建立关联，一种常用的方式是，医生为自己打上自己诊疗的疾病名称标签，通过关键词和标签之间的匹配来关联到具体的医生。<br>
<img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9xudr3cojj30n20oxgx7.jpg" alt="" loading="lazy"></p>
<p>搜索中两个重要的指标：召回率和准确率，前者表示搜索到的内容占应该被搜索内容的占比，相当于覆盖率，后者表示搜索到的结果中相关的内容的占比。为了提高召回率，我们可以将匹配规则定为模糊搜索，显示所有包含关键词的内容，但内容的相关性可能无法保证。</p>
<h2 id="3展示">3.展示</h2>
<p>根据我们设计的搜索策略，获取了相应的结果。将搜索结果以恰当的方式展示，是帮助用户完成完成搜索任务的重要环节。</p>
<p>①自动纠错</p>
<p>若有匹配的搜索结果则按照设计方式来显示。若搜索结果不正确，则可以提供自动纠错帮助，提供给用户建议的搜索结果，或其他的推荐结果，尽量避免无内容。倘若无内容时，需要设计友好的缺省页面。</p>
<p>②排序</p>
<p>默认排序：需要为所有的搜索结果设计排序规则，目的是让相关性结果更靠前。</p>
<p>提供自主排序：根据业务形态，提供相关的排序条件，如电商根据价格排序，销量排序等。</p>
<p>③内容分类<br>
当搜索结果有多种类型时，提供搜索结果分类展示，如在 keep搜索关键词“腹肌”，会以“话题”“课程”“动态”等分类来显示。</p>
<p>④高亮显示</p>
<p>在文本类搜索中，通常会提供关键词高亮显示功能。在其他类型的搜索没有显著的作用。<br>
<img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9xudrb3x5j310o0jt4jw.jpg" alt="" loading="lazy"></p>
<p>梳理总结了一些常见的搜索交互中输入、匹配与展示的案例与总结。根据我们的业务需求采用不同的方式，以及部分优化的体验可以在版本迭代中逐步升级。</p>
<p>①输入的入口要易于识别和打开，尽量让输入的过程更快捷；</p>
<p>②根据业务需求和数据反馈迭代搜索匹配策略；</p>
<p>③搜索结果展示是提高搜索成功率的重要环节。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[对企业管理的一点新认识]]></title>
        <id>https://paul-gao.com/post/dui-qi-ye-guan-li-de-yi-dian-xin-ren-shi/</id>
        <link href="https://paul-gao.com/post/dui-qi-ye-guan-li-de-yi-dian-xin-ren-shi/">
        </link>
        <updated>2021-06-28T05:59:51.000Z</updated>
        <summary type="html"><![CDATA[<p>最近读了三本书《创新者的窘境》，《scrum精髓》和《奈飞文化手册》。在我看完《奈飞文化手册》之后，结合自己的工作经验，对三本书中共同讲到的内容很有感触。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近读了三本书《创新者的窘境》，《scrum精髓》和《奈飞文化手册》。在我看完《奈飞文化手册》之后，结合自己的工作经验，对三本书中共同讲到的内容很有感触。</p>
<!-- more -->
<p>第一本书：是颠覆大师”克莱顿•克里斯坦森经典力作，他还著有《创新者的解答》一书。因为前者带给我的启发和对创新者窘境的疑惑，我接下来也会拜读这本书。《创新的窘境》通过作者对多个行业的持续观察，发现当某个行业中出现破坏性技术时，处于传统领先企业的管理者们会按照职业水准应对市场变化，但通常他们的策略不会取得预想的效果，甚至他们的职业的处理方式导致了企业在新技术浪潮中的落后。</p>
<p>分析其中的主要原因：</p>
<p>1.企业的资源分配由消费者和投资者主导；</p>
<p>2.新市场初期不能满足企业的增长需求；</p>
<p>第二本书：是Scrum的实践指南，作者按照Scrum开发的流程介绍了其几个核心概念。作者有丰富的Scrum培训经验和实战经验，所以可以当做学习的教科书。缺点是比较啰嗦，这是我对国外这类书籍的一贯偏见。而且纸上得来终觉浅，我并没有完整仔细读完，始终觉得还是要在实际项目中去操练。</p>
<p>第三本书：《奈飞文化手册》，由前奈飞CHO所著，主要写奈飞的企业管理文化—自由与责任。这本书的阅读给了我许多“震撼”。比如其中的几点：</p>
<p>1.企业管理的目标是更好地为客户服务，而不是为了管人；</p>
<p>2.公司只招“成年人”，即成熟的、自律的、目标导向的人；</p>
<p>3.所有人均需要了解业务，了解业务是为了更好地为客户服务；</p>
<p>4.薪酬应该是透明的，按照员工提供的价值付费；</p>
<p>5.当员工不满足公司的发展时就应该离开当前岗位，公司不是员工的职业规划师和培训学校。</p>
<p>书中还有更多的详细内容，让我受益匪浅。与大多传统企业的管理相比较，这些内容几乎都是颠覆性的。</p>
<p>我之所以把这三本书放在一起，是我发现他们提出了一些相通的企业管理的观点：</p>
<p>1.企业管理的目标是为了更好地服务客户，实现业务的增长。如同Scrum它让软件开发方式更敏捷，强调可供使用的软件胜过详细的说明文档。奈飞在探索企业管理改革时，精简了非常多不必要的流程，让员工的精力集中在实现客户服务的工作上。那些为了管理而设计的繁琐流程实际上造成了效率低下。其中一个有趣的例子是，奈飞裁去了一批中层管理者后，不仅没有对公司的业务造成消极影响，反而让每个人的行动速度比原来更快了。倘若做出任何决策前，都有明确的目标导向，那事情会变得简单很多。</p>
<p>2.让员工了解业务是非常重要的。一家持续性创新企业在推进破坏性技术业务时，除了投资者的阻碍外，内部员工对业务的不理解，也会造成对工作推进的不利影响。原因是员工不明白业务目的时，他们会从自己的角度出发去做事，通常这是与决策者的出发点不一致的。奈飞的做法是，即使是人力资源部门也要去了解业务。让员工了解业务，除了能帮助他们更好地完成自己的工作外，其实更多人知道业务背景，会让决策者听到更多的声音，让自己的决策变得更开放与合适。在产品工作中，一个需求在变成一份文档后，需求是被抽象过的，要让研发了解需求，要讲明白需求的背景，需求要有场景和角色来组成。敏捷开发有一个很好的创造是用户故事，以“作为一个&lt;角色&gt;, 我想要&lt;活动&gt;, 以便于&lt;商业价值&gt;”的句式来阐述需求。写的人能更好地以用户需求为出发来进行产品设计，看的人能更好地明白需求的目的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[权限设计]]></title>
        <id>https://paul-gao.com/post/quan-xian-she-ji/</id>
        <link href="https://paul-gao.com/post/quan-xian-she-ji/">
        </link>
        <updated>2021-06-28T05:59:21.000Z</updated>
        <summary type="html"><![CDATA[<p>文章来自网易UEDC – 蒋蕊遥。作者结合项目经历讲解RBAC权限系统设计实践。</p>
]]></summary>
        <content type="html"><![CDATA[<p>文章来自网易UEDC – 蒋蕊遥。作者结合项目经历讲解RBAC权限系统设计实践。</p>
<!-- more -->
<h1 id="一-令人头疼的权限设计">一、令人头疼的权限设计</h1>
<p>设计师在进行设计时，常常会抽象出对产品有诉求的多个角色，再依据角色的特性去梳理使用场景并设计。<br>
当角色之间的使用场景不冲突，不需要隔离时，我们会综合考虑这些角色的使用场景来设计解决方案。比如：网易云音乐同时为需要听歌和听电台的用户，提供所有的功能。<br>
当这些角色的使用场景完全不重叠、流程对立时，我们会设计完全独立的两套系统，如滴滴的司机端和乘客端。<br>
但除了以上两种情况，在大多数 B 端产品中，基于流程公正性、信息安全性等因素考虑，各个角色的使用场景是部分通用，部分隔离的，这时候就需要引入「权限系统」了。</p>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdxyn4edglj30u00hqgmd.jpg" alt="" loading="lazy"></figure>
<p>设计师有时会对角色权限系统有一丝畏难情绪。</p>
<ul>
<li>一方面因为角色权限系统的配置作为一个非常后台的管理功能，在竞品调研过程中很难通过上帝视角去解剖其中逻辑，自己琢磨又较难透彻；</li>
<li>另一方面对于角色权限系统，做好了并不能代表设计能力有多优秀，但一旦没做好就会导致整个流程不通、产品崩溃。所以设计师常对权限系统望而却步。<br>
以下就笔者的几次权限设计经历，提供一些所谓的经验套路。</li>
</ul>
<h1 id="二-基于技术模型进行设计-rbac模型">二、基于技术模型进行设计-RBAC模型</h1>
<p>进行设计前，最好能够理解技术模型。在业界接受度较高的功能权限模型是 RBAC（Role-Based Access Control）模型，其基本理念是将「角色」这个概念赋予用户，在系统中用户与权限之间通过角色进行关联，以这样的方法来实现灵活配置。以下就模型与设计相关的几点做一下简单介绍。</p>
<h2 id="1-基本的rbac模型">1. 基本的RBAC模型</h2>
<p>如果没有角色的概念，系统中每加入一个用户，就需要为这个用户配置一遍权限，下图是 wiki 中直接为用户权限管理方式，可以看出管理成本巨大。</p>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdxyoer4vqj30u00hx75h.jpg" alt="" loading="lazy"></figure>
<p>而引入「角色」概念后，如下图即是 RBAC 模型中最基本的模型：用户与角色可为多对一或多对多的关系，当一个用户的角色为多对多时，当前用户的权限是多个角色的并集。</p>
<figure data-type="image" tabindex="3"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdxyotsxmxj30qs0c176k.jpg" alt="" loading="lazy"></figure>
<p>此时只需要为角色赋予权限，能够大大减轻管理负担，同时将用户与权限解耦，提供更大的灵活性。</p>
<h2 id="2-引入用户组概念的rbac模型">2. 引入用户组概念的RBAC模型</h2>
<p>在大型平台的应用上，试想如果用户量上万，新增一个角色时，可能需要为大量用户都分配一遍新的角色，工程量仍然巨大，此时即可以引入用户组的概念。如果部分用户的使用场景是相对一致和基础的，我们可以把这些用户打包成一个组，基于这个组的对象进行角色和权限的赋予。</p>
<p>同理如果权限较多时也会存在一样的问题，处理方式是引入权限组的概念，将使用场景相对固定的一组功能或权限打包成组赋予角色。但是一般来讲一个系统中权限功能的体量是相对有限和可控的，所以实际应用中对权限组的使用较少。</p>
<figure data-type="image" tabindex="4"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdxyp5e3oxj30pz0fc0tx.jpg" alt="" loading="lazy"></figure>
<p>下图所示为 mac 系统中运行添加用户组，并以用户组为单位配置权限。</p>
<figure data-type="image" tabindex="5"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdxyp75944j30qb08xjsj.jpg" alt="" loading="lazy"></figure>
<p>需要注意的是即使有用户组或权限组的存在，也可以允许用户或权限与角色直接关联，这个可以视具体业务情况而定。</p>
<h2 id="3-角色继承的rbac模型">3. 角色继承的RBAC模型</h2>
<p>在一个业务场景中，如果角色需区分：设计主管、设计组长、设计成员，并且管理方式为向下兼容时，则需使用角色继承的 RBAC 模型。上层角色继承下层角色的全部权限，且可额外赋予权限。</p>
<figure data-type="image" tabindex="6"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdxypv0iu8j30ap0bndga.jpg" alt="" loading="lazy"></figure>
<p>此时除了对角色进行定义，还需要管理角色间的关系，通过关系来体现角色的层级关系，从而达到继承权限的效果。角色的继承关系主要有两种：树形图和有向无环图。</p>
<figure data-type="image" tabindex="7"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdxyq2wwokj30r2096dgi.jpg" alt="" loading="lazy"></figure>
<p>继承关系常常来源于公司团队的组织结构，此时常将角色与组织结构进行关联达到继承角色模型的效果。如下图所示的赵同学，其角色是「三级团队负责人」，与其并列的小组中有多个「三级团队负责人」的角色，但依附于左侧的组织结构树，各级负责人仅有查看和操作自己下属子节点的权限。</p>
<figure data-type="image" tabindex="8"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdxyqf6hd9j30rv0fgwg3.jpg" alt="" loading="lazy"></figure>
<h2 id="4-限制的rbac模型">4. 限制的RBAC模型</h2>
<p>在一个产品或系统中，部分角色可能是需要隔离的、不允许被同时赋予一个人的。跟大家熟知的不能既是「运动员」又是「裁判员」一个道理。</p>
<p>因此，对于众多角色中的一组，只能是单选的关系，但多组角色之间可以共同存在。如下图中，一个用户可以既为设计师又为管理员，但在设计师角色组中仅能被赋予一个角色，在管理员角色组中也仅能被赋予一个角色。</p>
<figure data-type="image" tabindex="9"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdxyqmsjb0j30gc0bqgm1.jpg" alt="" loading="lazy"></figure>
<p>此外，限制还有可能是数量上的，比如一个产品组中必须有且只有一个管理员，不允许删除或再分配管理员角色，仅允许将负责人角色变更。</p>
<figure data-type="image" tabindex="10"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdxyqwlh0nj30rr08c3z4.jpg" alt="" loading="lazy"></figure>
<p>限制的模型不仅仅对分配过程产生影响，有时即使拥有了多种角色，因为不同的角色对同一个功能的使用方式或数据会产生冲突，所以使用时也需要进行限制。如下图所示为同一时间仅允许以一个身份登录。</p>
<figure data-type="image" tabindex="11"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdxyre9s6jj30ek0cz74q.jpg" alt="" loading="lazy"></figure>
<p>根据不同的业务需求，限制的形式很多。需要注意的是不能仅依赖后端限制，而是要在前端展示清晰的规则和恰当的限制，避免用户出错和沮丧。</p>
<h1 id="三-权限的拆分与设计">三、权限的拆分与设计</h1>
<p>通过 RBAC 模型已经能够很好的搭建起用户、角色与权限之间的关系了。但具体是什么样的关系，以及「权限」这个抽象的概念具体如何规划？</p>
<p>这些都需要分析清楚才能进一步设计出完善的权限系统。</p>
<p>首先需要知道，一般产品的权限由页面、操作和数据构成。页面与操作相互关联，必须拥有页面权限，才能分配该页面下对应的操作权限。数据可被增删改查。</p>
<p>整体关系如下图所示：</p>
<figure data-type="image" tabindex="12"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdxyrnscdmj30pg0fgmy6.jpg" alt="" loading="lazy"></figure>
<p>因此，在设计之初我们就需要考虑到未来可能区分角色的地方，尽量解耦、模块化。对于技术来说，每一个页面模块、每一个操作都最好使用独立的接口。对于设计来说，需要保障所有角色因为权限而屏蔽掉部分操作和数据后，页面和流程仍能体验流畅。</p>
<p>保证初期设计支持后，配置权限时，还需要注意以下几点：</p>
<h2 id="1-确定是否支持前端配置">1. 确定是否支持前端配置</h2>
<p>如果角色和权限相对固定，则一般将角色与权限的关系可以写在后台，改动时需要后端变更且重新上线。这种情况适用于公司内部系统等只有一个使用主体的系统。</p>
<p>如果需要自定义角色或者每个角色在不同使用者的场景下有不同的权限，则需要将角色的定义、角色与权限之间的配置体现在「前端用户配置页面」。这种情况适用于有频繁变动的自定义角色权限，和有租户体系的系统。</p>
<h2 id="2-以基本单元拆分以业务逻辑配置">2. 以基本单元拆分，以业务逻辑配置</h2>
<p>一般可将每个对象的「增、删、改、查」各自作为一个基本的权限单元。打个比方，在「人员管理」中，查看人员列表、添加人员、删除人员、编辑人员信息最好拆分为4个权限单元。在技术和设计上，我们希望能尽量做到解耦和模块化。</p>
<p>但是在业务层面有些操作却是一体的。这些不能拆开的权限在「前端用户配置页面」中建议打包成一个整体提供配置。例如：如果我们确定在系统的现有和未来业务中，仅分为普通成员有「人员管理」的查看权限，管理员有操作权限，则可将「增、删、改」三个基本权限单位合并为「操作」权限进行配置。</p>
<h2 id="3-页面权限优先于操作和数据权限">3. 页面权限优先于操作和数据权限</h2>
<p>必须配置了页面模块权限后，才能配置当前页面模块下具体的操作权限，以及页面模块的数据展示权限。</p>
<h2 id="4-查看权限优先于增删改权限">4. 查看权限优先于增删改权限</h2>
<p>正常情况下，一定要先能查看某个模块或操作，其它的增删改操作才有意义。因此在设计时，应在获取查看权限前限制其它权限的配置，或者配置其它权限时默认赋予查看权限。</p>
<h2 id="5-角色与权限的多种关系">5. 角色与权限的多种关系</h2>
<p>角色与权限的关系不仅是单纯「是/否关系」，还包括以某种限制进行操作，和以某种程度访问数据。</p>
<p>例如在「人员管理」中：</p>
<p>数据范围：用户拥有查看人员列表的权限，但仅能查看自己所在的团队；<br>
数据边界限制（上限等）：添加人员时不能超过20个等。<br>
数据字段：HR 能查看人员列表中包括职级、薪资等字段，其它角色仅能查看姓名邮箱等字段；</p>
<h2 id="6-角色与权限的设计表达">6. 角色与权限的设计表达</h2>
<p>在传达一个系统的权限设计规则时，设计师常常习惯用主观最直接的方式表达想法，如用「当……时，就……」的句式来表达。但一个平台中涉及的权限规则是非常多的，当通篇以这样的形式描述时，表达对象将很难理解。</p>
<p>正确的描述方式：更清晰的是基于开发的语言，和技术模型的结果进行表达。将各角色与权限单元绘制成网格，每个交叉点网格中描述该角色与权限的数据关系和限制。</p>
<p>如下图所示：</p>
<figure data-type="image" tabindex="13"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdxyrzq4cxj30u00f8wgs.jpg" alt="" loading="lazy"></figure>
<h1 id="四-需要注意的tips">四、需要注意的Tips</h1>
<h2 id="1-隐形的admin">1. 隐形的admin</h2>
<p>在可自定义角色和权限的系统中，一般需要预留一个 admin 角色来进行系统的初始配置，用于添加首批的业务人员和配置基本的角色。</p>
<p>有的系统中允许存在上帝视角的 admin 角色，则其可以作为「超级管理员」显示在角色配置的列表中。有的系统中不允许这种角色存在，则可将这种角色设置为隐形的状态，仅赋予维护系统的工作人员。</p>
<h2 id="2-初始权限的赋予">2. 初始权限的赋予</h2>
<p>对于允许用户自行加入的系统，需要设定一至多个默认的角色，有时可以是仅有最基础权限的「游客」角色。</p>
<p>初始权限还可以与用户既有的某些数据字段进行关联，如添加用户时获取到用户的岗位为「设计师」，则直接赋予「设计师」角色的权限。</p>
<h2 id="3-人员管理中对自己的处理">3. 人员管理中对自己的处理</h2>
<p>在人员管理中，管理员角色处理自己时需要额外注意。因为如果修改或删除了自己角色后，可能导致系统没有管理角色，从而无法添加其他成员和正常运行。设计时可添加判断，当自己为唯一管理角色时，禁止编辑和删除。</p>
<h2 id="4-无页面权限的提示">4. 无页面权限的提示</h2>
<p>虽然可以通过页面权限限制直接隐藏当前用户没有权限的页面，但不能排除用户获取到权限外的 url 地址。当用户意外访问到没有权限的页面时务必提供「无权限」的提示，避免用户认为系统 bug。</p>
<h1 id="五-总结">五、总结</h1>
<p>总结一下，整个权限系统设计就是定义各个节点和节点间关系的过程。</p>
<p>节点包括：</p>
<p>用户；<br>
用户组；<br>
角色；<br>
角色组；<br>
权限（页面、操作、数据）；<br>
权限组（页面、操作、数据）。<br>
关系包括：</p>
<p>是/否关系；<br>
继承关系；<br>
限制关系（互斥、范围限制、边界限制、字段限制……）；</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[UML状态机在需求分析中的应用]]></title>
        <id>https://paul-gao.com/post/uml-zhuang-tai-ji-zai-xu-qiu-fen-xi-zhong-de-ying-yong/</id>
        <link href="https://paul-gao.com/post/uml-zhuang-tai-ji-zai-xu-qiu-fen-xi-zhong-de-ying-yong/">
        </link>
        <updated>2021-06-28T05:58:39.000Z</updated>
        <content type="html"><![CDATA[<p>总结一下状态在需求分析中怎么使用。</p>
<h1 id="1什么是状态机">1.什么是状态机</h1>
<h2 id="11概念">1.1概念</h2>
<p>状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。</p>
<h2 id="12构成要素">1.2构成要素</h2>
<p>现态：是指当前所处的状态。</p>
<p>条件：又称为“事件”。当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。</p>
<p>动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态。</p>
<p>次态：条件满足后要迁往的新状态。“次态”是相对于“现态”而言的，“次态”一旦被激活，就转变成新的“现态”了。</p>
<h1 id="2应用场景"><strong>2.应用场景</strong></h1>
<p>在需求分析中，涉及到业务有多种状态转换时，用状态机来梳理状态流转过程和转换条件。避免状态遗漏和重复。如电商类产品的需求分析，订单通常会有较多状态。如果在流程图中表示订单状态会比较混乱，可以用状态机来单独梳理订单流程的变化。</p>
<p>以下是一个简化的下单流程：</p>
<h1 id="3怎样使用"><strong>3.怎样使用</strong></h1>
<p>根据上面的下单流程，对整个订单流程的状态用状态机梳理如下：</p>
<figure data-type="image" tabindex="1"><img src="https://static.gridea.dev/280522035228049932/gHG4QN1Kj.png" alt="" loading="lazy"></figure>
<p>图例</p>
<p>1）列出主流程的订单状态：</p>
<p>待支付，待发货，待收货，已完成。以及表示出现态转换为次态的条件。</p>
<p>2）列出每种异常状态：</p>
<p>①待支付订单：若订单超时未支付，系统会自动取消订单，订单状态为已取消；若用户主动取消订单，则订单状态为已取消。</p>
<p>②待发货订单：若用户发起退款申请，则要进入退款流程。退款流程为订单流程中的分支流程，它的状态不归属于订单状态，故用虚线框标示它是一个独立的流程。退款完成后，订单状态为已取消。</p>
<h1 id="4注意事项"><strong>4.注意事项</strong></h1>
<p>1）不重不漏：例如“已支付”与“待发货”表示的是同一个状态。</p>
<p>2）状态机的边界：一个状态机表示一个流程/模块内的状态迁移。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《贫困的终结》读后]]></title>
        <id>https://paul-gao.com/post/lesslesspin-kun-de-zhong-jie-greatergreater-du-hou/</id>
        <link href="https://paul-gao.com/post/lesslesspin-kun-de-zhong-jie-greatergreater-du-hou/">
        </link>
        <updated>2021-06-28T05:57:23.000Z</updated>
        <content type="html"><![CDATA[<p>看完《贫困的终结》一书，对何为贫困，为何贫贫困有了一些新的视角，作者是深处扶贫第一线的亲历者，书中有亲身工作经验和各派学者对贫困的观点。</p>
<h1 id="1什么是贫困">1.什么是贫困</h1>
<p>贫困既是绝对的也是相对的，从绝对的角度来说，无家可归者、食不果腹者可归为绝对贫困，联合国也有指定相应判定指标。但是具体到不同国家地区，贫困线的设立差异很大，比如中国和美国的贫困线。从指标设立来看，有很强的政治性，可能为了完成政治目标而调整贫困线。</p>
<p>就算是超过了贫困线，但很多人的生活并不见得就摆脱了贫困。当今很少有饥饿致死的情况了，但就贫困地区的各种生活条件来看，他们依然处于贫困。所以看起来贫困是被不贫困的人来定义的。确实，身处其中之人，已经习惯了自己的生活方式而不自知。当其他地方现代化快速发展，现代的教育、医疗健康和生产方式等普及，两相对比自然可看出谁贫谁富。</p>
<p>所以作者总结到所谓的贫困就是“不同群体之间现代性断层的问题”。那“扶贫的元方案，就是把现代性扩张到没有掌握现代性伦理的群体。”</p>
<h1 id="2穷人为什么贫困">2.穷人为什么贫困</h1>
<p>人为什么贫困，这个问题最普遍和朴素的看法就是因为穷人懒惰，他们放弃了个人努力。对这种观点的一个反驳就是，在政治不稳定的特殊年代为什么大家的生活水平普遍都很低，是所有人都没有努力吗。而改革开放之后，大家的生活水平显著提高，这是因为后来的人更勤劳了吗？</p>
<p>还有一种看法是贫困文化，</p>
<blockquote>
<p>刘易斯在《贫困文化》一文中指出，“贫困文化一旦形成，就必然倾向于永恒。棚户区的孩子到六七岁时，通常已经吸收了贫困亚文化的基本态度和价值观念。因此，他们在心理上不准备接受那些可能改变他们生活的种种变迁的条件或改善的机会。</p>
</blockquote>
<p>另还有学者的公平环境说，因为社会环境缺乏公平的机会，所以导致贫富差距，这个社会公平包含稳定的社会环境，社会福利等。</p>
<blockquote>
<p>现代风险社会中每个人实际享有的社会保障可能是决定贫困的重要因素之。</p>
</blockquote>
<p>比如缺乏社会保障，那一个贫困儿童就可能面临辍学。</p>
<h1 id="3如何消除贫困">3.如何消除贫困</h1>
<p>有很多通过个人努力来摆脱贫困的案例，特别是上一待企业家。但很多号称白手起家的人，他们的起点已经搞过很多人了。所以那些以懒惰职责别人的人，</p>
<blockquote>
<p>每当你觉得想要批评什么人的时候，你切要记着：这个世界上的人并非都具备你禀有的条件。</p>
</blockquote>
<p>个人意义的消除贫困离不开个人努力，宏观上的消除贫困依赖于国家政策，通过稳定公平社会环境和有保障的社会福利来解决。这是一个系统性工程，比如低保政策、产业扶贫等等。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dan Olsen：怎样实现 PMF？]]></title>
        <id>https://paul-gao.com/post/dan-olsenzen-yang-shi-xian-pmf/</id>
        <link href="https://paul-gao.com/post/dan-olsenzen-yang-shi-xian-pmf/">
        </link>
        <updated>2021-06-28T05:52:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="dan-olsen怎样实现-pmf">Dan Olsen：怎样实现 PMF？</h1>
<p>Created: Feb 04, 2021 10:31 AM<br>
Tags: 产品, 需求分析</p>
<p><a href="https://mmbiz.qpic.cn/mmbiz_png/7VkBLgwsDC1A8MmjvCRssIvVoiaXc46AciaoC7IfmQ8aRxHap5xnDIvB4dybNh35jz4fwxDDicHoiaa7PAr0icXLcfQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1">https://mmbiz.qpic.cn/mmbiz_png/7VkBLgwsDC1A8MmjvCRssIvVoiaXc46AciaoC7IfmQ8aRxHap5xnDIvB4dybNh35jz4fwxDDicHoiaa7PAr0icXLcfQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1</a></p>
<pre><code>                                                                                PMF金字塔
</code></pre>
<p>如你所见，最顶层的三层与产品有关，基础的部分与市场有关。</p>
<p>目标用户位于底部，因为它是最重要的元素。如果你没找准目标用户，整个金字塔可能会崩塌，导致你必须从头再来。你要针对未被满足的用户户 ，否则你的产品对他们毫无用处。其他所有东西都是从这里构建的：价值主张是对如何满足目标用户未满足的需求的说明，功能传达价值，用户体验是用户接收价值的体验。如果一切都是一致的，那么你就有了PMF（产品-市场契合）。</p>
<p>1.<strong>精益产品流程</strong></p>
<p>要通过精益产品流程实现PMF，可以从金字塔的底部开始，逐步完成工作。</p>
<p>•确定目标用户。</p>
<p>•确定未被满足的用户需求。</p>
<p>•定义你的价值主张。</p>
<p>•确定MVP功能集。</p>
<p>•创建MVP原型。</p>
<p>•与用户一起测试你的MVP。</p>
<p>在本文中，我们将探讨第一到第三步，这是Dan Olsen金字塔的基础。</p>
<p>2.<strong>确定目标客户</strong></p>
<p>公司通常有关于目标用户的想法，但在深入挖掘后，实际上非常模糊。比如“千禧一代”乍一看听起来不错，但当你停下来思考它时，你会发现这是一个多元化的群体，有着不同的需求和问题。你需要更深入。例如：“渴望在家做饭的千禧一代。”</p>
<p>用户可能有共同的高层级需求，但有不同的详细需求。例如，一个家庭主妇和一个年轻的飙车党可能会有以下的高层次需求：“距离我家100英里内的出行用车”，但他们的详细需求将会大不相同。家庭主妇可能需要空间来接送她的孩子，他们的朋友和他们的运动装备。她可能重视安全，也许还有燃油经济性。飙车党可能重视速度，造型。这就是为什么路上有这么多不同类型的汽车。</p>
<p>3.<strong>找出服务不足的客户需求</strong></p>
<p>在谈论需求时，我们可以深入探讨问题空间与解决方案空间。</p>
<p>•问题空间：产品应解决的用户问题，需求或利益。<strong>这是一个产品需求。</strong></p>
<p>•解决方案空间：旨在满足该要求的特定实施或设计。</p>
<p>PM经常在没有花时间考虑问题空间的情况下直接进入解决方案空间。这就是为什么美国航空航天局的承包商在60年代在研发上花了100万美元来发明一种可以写入零重力的“太空笔”，而苏联只给他们的宇航员0.50美元的铅笔！两者都解决了问题，但成本水平明显不同。</p>
<p>NASA“太空笔”纯粹存在于解决方案领域。丹奥尔森称之为“解决方案污染” - 美国宇航局的目标是“创造一支在太空中写作的钢笔。”如果目标集中在这个问题上 ：“需要在太空中写作”，笔的想法就不会污染他们的专注，他们本可以节省100万美元！</p>
<p>（译者注：此案例实际是谣传，查看《科学美国人》的辟谣文章https://www.scientificamerican.com/article/fact-or-fiction-nasa-spen/，作者本意借此案例说明挖掘真正的需求的重要性）</p>
<p>鉴于问题空间可能包含许多需求，因此根据用户价值确定优先级非常重要。但是我们怎么做呢？Dan Olsen提出了一个公式：</p>
<p><strong>重要性与满意度</strong></p>
<p>•重要性：一个省时省力的方法，直接询问他们“这对您来说有多重要，从1到10分。”这是一个明确特定需求重要性的简单方法。</p>
<p>•满意度：询问客户对当前可用解决方案的满意程度。</p>
<p>竞争市场是一种具有高度重要性的需求，目前其他公司已经很好地满足了这一需求。尝试寻找一个非常重要的需求，但目前很难满足。这是找到机会的地方。</p>
<p>3.<strong>定义你的价值主张</strong></p>
<p>你要传达哪些好处，以及你将如何变得更好？在这里，Dan Olsen 建议应用 KANO 模型：</p>
<p>•产品如何满足客户需求？</p>
<p>•使用本产品时用户满意度如何？</p>
<p>在图表上绘制这两个指标，我们提出了三种重要的功能/优点。</p>
<p>**基础需求：**满足需求不一定获得满意，但它可以避免用户产生因为满足需求而产品的不快。例如，安全带是汽车的必备品，但使用它们并不能让客户满意。一旦每个座位都有一条安全带，就没有空间可以进一步满足这种需求。必备功能可以是你的产品提供的核心服务。</p>
<p><strong>期望型需求</strong> ：越多越好，越少越糟。例如比竞争对手的芯片快 10%。没有它会导致问题，让它为产品持续提供价值。</p>
<p>**兴奋型需求：**没有它不会导致问题，有则带来快乐和满足感。需求和功能随着时间的推移而迁移。GPS 导航曾是兴奋型需求，而现在是期望型需求，甚至只是基本需求。</p>
<p><a href="https://mmbiz.qpic.cn/mmbiz_png/7VkBLgwsDC20xDibP1Np9xwWVqBmm3Ms54xkYt3GkPURKE9644G3h9OXNV1NPH7F02ibGZ1sOUHZ5AemGCQRV8dA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1">https://mmbiz.qpic.cn/mmbiz_png/7VkBLgwsDC20xDibP1Np9xwWVqBmm3Ms54xkYt3GkPURKE9644G3h9OXNV1NPH7F02ibGZ1sOUHZ5AemGCQRV8dA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1</a></p>
<pre><code>                                                    (横轴表示需求的完备程度，纵轴表示满意度)
</code></pre>
<p>我们如何使用这三个类别来提出我们的价值主张？</p>
<p>问自己这两个问题：</p>
<p>•你提供给用户哪些好处？</p>
<p>•你如何比竞争对手更好？</p>
<p>为了回答这些问题，Dan 建议创建一个表格，其中每个基础需求，期望型需求和兴奋型需求中至少列出一个好处。接下来，为你的产品和竞品各添加一列。为自己和竞品按照规则评分。不是每一项评分你都会很满意，但是这个练习将向你展示你有优势的地方 。你独特的差异化因素：你将在哪里跑赢，你会在哪里出类拔萃？</p>
<p><a href="https://mmbiz.qpic.cn/mmbiz_png/7VkBLgwsDC20xDibP1Np9xwWVqBmm3Ms5nKM1wa2Jx4RYIubeQ7XuwuClVjBlrt4gqic96ia7aD6GvlAkx4G3EEJw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1">https://mmbiz.qpic.cn/mmbiz_png/7VkBLgwsDC20xDibP1Np9xwWVqBmm3Ms5nKM1wa2Jx4RYIubeQ7XuwuClVjBlrt4gqic96ia7aD6GvlAkx4G3EEJw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1</a></p>
<pre><code>                                                                                示例：优步的价值主张
</code></pre>
<hr>
<p>本文系翻译自 Dan Olsen 的 <em>How To Achieve Product-Market Fit</em></p>
]]></content>
    </entry>
</feed>